#ifndef ROUTING_H
#define ROUTING_H

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>

#if defined(__GNUC__) && (__GNUC__ >= 4)
#define ROUTING_MUST_USE __attribute__ ((warn_unused_result))
#elif defined(_MSC_VER) && (_MSC_VER >= 1700)
#define ROUTING_MUST_USE _Check_return_
#else
#define ROUTING_MUST_USE
#endif

enum RoutingResult {
    ROUTING_RESULT_SUCCESS = 0,
    ROUTING_RESULT_NULL_POINTER_ERROR = 1,
    ROUTING_RESULT_INVALID_OPERATION_ERROR = 2,
    ROUTING_RESULT_BUFFER_OVERFLOW_ERROR = 3,
};
typedef uint32_t RoutingResult;

typedef struct Grid Grid;

typedef struct Point {
    int32_t x;
    int32_t y;
} Point;

typedef struct Rect {
    struct Point min;
    struct Point max;
} Rect;

typedef struct PathEndpoints {
    struct Point start;
    struct Point end;
} PathEndpoints;

typedef struct Vertex {
    uint32_t id;
    float x;
    float y;
} Vertex;

typedef struct VertexBuffer {
    struct Vertex *vertices;
    size_t len;
} VertexBuffer;

ROUTING_MUST_USE RoutingResult init_thread_pool(size_t *thread_count);

ROUTING_MUST_USE RoutingResult grid_new(struct Grid **grid);

ROUTING_MUST_USE RoutingResult grid_free(struct Grid *grid);

ROUTING_MUST_USE RoutingResult grid_fill(struct Grid *grid, struct Rect rect);

ROUTING_MUST_USE
RoutingResult grid_find_paths(const struct Grid *grid,
                              const struct PathEndpoints *paths,
                              size_t path_count,
                              struct VertexBuffer *vertex_buffers,
                              size_t vertex_buffer_capacity);

#endif /* ROUTING_H */
